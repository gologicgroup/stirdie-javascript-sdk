!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Stirdie=t():e.Stirdie=t()}(window,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=6)}([function(e,t){var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(r){var n=new Uint8Array(16);e.exports=function(){return r(n),n}}else{var i=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),i[t]=e>>>((3&t)<<3)&255;return i}}},function(e,t){for(var r=[],n=0;n<256;++n)r[n]=(n+256).toString(16).substr(1);e.exports=function(e,t){var n=t||0,i=r;return[i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],"-",i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]],i[e[n++]]].join("")}},function(e,t,r){var n=r(4),i=r(5),o=i;o.v1=n,o.v4=i,e.exports=o},function(e,t,r){var n;!function(i){"use strict";function o(e,t){var r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function s(e,t,r,n,i,s){return o((a=o(o(t,e),o(n,s)))<<(c=i)|a>>>32-c,r);var a,c}function a(e,t,r,n,i,o,a){return s(t&r|~t&n,e,t,i,o,a)}function c(e,t,r,n,i,o,a){return s(t&n|r&~n,e,t,i,o,a)}function u(e,t,r,n,i,o,a){return s(t^r^n,e,t,i,o,a)}function l(e,t,r,n,i,o,a){return s(r^(t|~n),e,t,i,o,a)}function h(e,t){var r,n,i,s,h;e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var d=1732584193,p=-271733879,f=-1732584194,y=271733878;for(r=0;r<e.length;r+=16)n=d,i=p,s=f,h=y,d=a(d,p,f,y,e[r],7,-680876936),y=a(y,d,p,f,e[r+1],12,-389564586),f=a(f,y,d,p,e[r+2],17,606105819),p=a(p,f,y,d,e[r+3],22,-1044525330),d=a(d,p,f,y,e[r+4],7,-176418897),y=a(y,d,p,f,e[r+5],12,1200080426),f=a(f,y,d,p,e[r+6],17,-1473231341),p=a(p,f,y,d,e[r+7],22,-45705983),d=a(d,p,f,y,e[r+8],7,1770035416),y=a(y,d,p,f,e[r+9],12,-1958414417),f=a(f,y,d,p,e[r+10],17,-42063),p=a(p,f,y,d,e[r+11],22,-1990404162),d=a(d,p,f,y,e[r+12],7,1804603682),y=a(y,d,p,f,e[r+13],12,-40341101),f=a(f,y,d,p,e[r+14],17,-1502002290),d=c(d,p=a(p,f,y,d,e[r+15],22,1236535329),f,y,e[r+1],5,-165796510),y=c(y,d,p,f,e[r+6],9,-1069501632),f=c(f,y,d,p,e[r+11],14,643717713),p=c(p,f,y,d,e[r],20,-373897302),d=c(d,p,f,y,e[r+5],5,-701558691),y=c(y,d,p,f,e[r+10],9,38016083),f=c(f,y,d,p,e[r+15],14,-660478335),p=c(p,f,y,d,e[r+4],20,-405537848),d=c(d,p,f,y,e[r+9],5,568446438),y=c(y,d,p,f,e[r+14],9,-1019803690),f=c(f,y,d,p,e[r+3],14,-187363961),p=c(p,f,y,d,e[r+8],20,1163531501),d=c(d,p,f,y,e[r+13],5,-1444681467),y=c(y,d,p,f,e[r+2],9,-51403784),f=c(f,y,d,p,e[r+7],14,1735328473),d=u(d,p=c(p,f,y,d,e[r+12],20,-1926607734),f,y,e[r+5],4,-378558),y=u(y,d,p,f,e[r+8],11,-2022574463),f=u(f,y,d,p,e[r+11],16,1839030562),p=u(p,f,y,d,e[r+14],23,-35309556),d=u(d,p,f,y,e[r+1],4,-1530992060),y=u(y,d,p,f,e[r+4],11,1272893353),f=u(f,y,d,p,e[r+7],16,-155497632),p=u(p,f,y,d,e[r+10],23,-1094730640),d=u(d,p,f,y,e[r+13],4,681279174),y=u(y,d,p,f,e[r],11,-358537222),f=u(f,y,d,p,e[r+3],16,-722521979),p=u(p,f,y,d,e[r+6],23,76029189),d=u(d,p,f,y,e[r+9],4,-640364487),y=u(y,d,p,f,e[r+12],11,-421815835),f=u(f,y,d,p,e[r+15],16,530742520),d=l(d,p=u(p,f,y,d,e[r+2],23,-995338651),f,y,e[r],6,-198630844),y=l(y,d,p,f,e[r+7],10,1126891415),f=l(f,y,d,p,e[r+14],15,-1416354905),p=l(p,f,y,d,e[r+5],21,-57434055),d=l(d,p,f,y,e[r+12],6,1700485571),y=l(y,d,p,f,e[r+3],10,-1894986606),f=l(f,y,d,p,e[r+10],15,-1051523),p=l(p,f,y,d,e[r+1],21,-2054922799),d=l(d,p,f,y,e[r+8],6,1873313359),y=l(y,d,p,f,e[r+15],10,-30611744),f=l(f,y,d,p,e[r+6],15,-1560198380),p=l(p,f,y,d,e[r+13],21,1309151649),d=l(d,p,f,y,e[r+4],6,-145523070),y=l(y,d,p,f,e[r+11],10,-1120210379),f=l(f,y,d,p,e[r+2],15,718787259),p=l(p,f,y,d,e[r+9],21,-343485551),d=o(d,n),p=o(p,i),f=o(f,s),y=o(y,h);return[d,p,f,y]}function d(e){var t,r="",n=32*e.length;for(t=0;t<n;t+=8)r+=String.fromCharCode(e[t>>5]>>>t%32&255);return r}function p(e){var t,r=[];for(r[(e.length>>2)-1]=void 0,t=0;t<r.length;t+=1)r[t]=0;var n=8*e.length;for(t=0;t<n;t+=8)r[t>>5]|=(255&e.charCodeAt(t/8))<<t%32;return r}function f(e){var t,r,n="";for(r=0;r<e.length;r+=1)t=e.charCodeAt(r),n+="0123456789abcdef".charAt(t>>>4&15)+"0123456789abcdef".charAt(15&t);return n}function y(e){return unescape(encodeURIComponent(e))}function v(e){return function(e){return d(h(p(e),8*e.length))}(y(e))}function m(e,t){return function(e,t){var r,n,i=p(e),o=[],s=[];for(o[15]=s[15]=void 0,i.length>16&&(i=h(i,8*e.length)),r=0;r<16;r+=1)o[r]=909522486^i[r],s[r]=1549556828^i[r];return n=h(o.concat(p(t)),512+8*t.length),d(h(s.concat(n),640))}(y(e),y(t))}function g(e,t,r){return t?r?m(t,e):f(m(t,e)):r?v(e):f(v(e))}void 0===(n=function(){return g}.call(t,r,t,e))||(e.exports=n)}()},function(e,t,r){var n,i,o=r(0),s=r(1),a=0,c=0;e.exports=function(e,t,r){var u=t&&r||0,l=t||[],h=(e=e||{}).node||n,d=void 0!==e.clockseq?e.clockseq:i;if(null==h||null==d){var p=o();null==h&&(h=n=[1|p[0],p[1],p[2],p[3],p[4],p[5]]),null==d&&(d=i=16383&(p[6]<<8|p[7]))}var f=void 0!==e.msecs?e.msecs:(new Date).getTime(),y=void 0!==e.nsecs?e.nsecs:c+1,v=f-a+(y-c)/1e4;if(v<0&&void 0===e.clockseq&&(d=d+1&16383),(v<0||f>a)&&void 0===e.nsecs&&(y=0),y>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=f,c=y,i=d;var m=(1e4*(268435455&(f+=122192928e5))+y)%4294967296;l[u++]=m>>>24&255,l[u++]=m>>>16&255,l[u++]=m>>>8&255,l[u++]=255&m;var g=f/4294967296*1e4&268435455;l[u++]=g>>>8&255,l[u++]=255&g,l[u++]=g>>>24&15|16,l[u++]=g>>>16&255,l[u++]=d>>>8|128,l[u++]=255&d;for(var b=0;b<6;++b)l[u+b]=h[b];return t||s(l)}},function(e,t,r){var n=r(0),i=r(1);e.exports=function(e,t,r){var o=t&&r||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||n)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[o+a]=s[a];return t||i(s)}},function(e,t,r){"use strict";r.r(t),r.d(t,"Stirdie",(function(){return x}));let n={http:{baseURL:"https://api.stirdie.com",keys:{publicKey:"/keys/public/:id",privateKey:"/keys/private"},storage:{uploadInitialise:"/storage/upload/:id",uploadPart:"/storage/upload",get:"/storage/:id",list:"/storage",copy:"/storage/:id/copy",move:"/storage/:id/move",delete:"/storage/:id"},transfer:{uploadInitialise:"/transfer/upload/:id",uploadPart:"/transfer/upload",get:"/transfer/:id",activity:"/transfer"}}};var i=()=>n,o=e=>{n=Object.assign(Object.assign({},n),e)};let s={};var a=()=>s,c=e=>{s=Object.assign(Object.assign({},s),e)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function u(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))}class l{constructor(e){this.keyManagementSerivce=e}getPublicKey(e="me",t){return u(this,void 0,void 0,(function*(){this.keyManagementSerivce.getPublicKey(e).then(e=>t(null,e)).catch(e=>t(e))}))}getPrivateKey(e){return u(this,void 0,void 0,(function*(){this.keyManagementSerivce.getPrivateKey().then(t=>e(null,t)).catch(t=>e(t))}))}}const h=e=>{let t="";for(var r=new Uint8Array(e),n=r.byteLength,i=0;i<n;i++)t+=String.fromCharCode(r[i]);return window.btoa(t)},d=e=>(e=>{let t=new Uint8Array(e.length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return t})(window.atob(e));const p=(e,t="public")=>new Promise((r,n)=>{let i="encrypt",o="spki";"private"===t&&(i="decrypt",o="pkcs8");try{crypto.subtle.importKey(o,((e,t="public")=>(e=(e=(e=e.replace("\n","")).replace(`-----BEGIN ${t.toUpperCase()} KEY-----`,"")).replace(`-----END ${t.toUpperCase()} KEY-----`,""),d(e)))(e,t),{name:"RSA-OAEP",hash:"SHA-256"},!0,[i]).then(e=>r(e))}catch(e){console.log(e),n(e)}});var f=e=>new Promise((t,r)=>u(void 0,void 0,void 0,(function*(){try{const r=yield(i=e.pem,p(i,"public")),o=yield crypto.subtle.encrypt({name:"AES-GCM",iv:e.iv},e.key,e.buffer),s=yield(n=e.key,u(void 0,void 0,void 0,(function*(){return yield crypto.subtle.exportKey("raw",n)}))),a=yield crypto.subtle.encrypt({name:"RSA-OAEP"},r,s);return t({buffer:o,key:h(a)})}catch(e){return r(e)}var n,i})));const y=(e=256)=>new Promise(t=>u(void 0,void 0,void 0,(function*(){t(yield crypto.subtle.generateKey({name:"AES-GCM",length:e},!0,["encrypt","decrypt"]))})));class v{constructor(){this.subscribers={}}on(e,t){void 0===this.subscribers[e]&&(this.subscribers[e]=[]),this.subscribers[e].push(t)}emit(e,...t){void 0!==this.subscribers[e]&&this.subscribers[e].forEach(e=>{e(...t)})}}var m=r(2);const g=(e,t,r,n,i,o,s)=>((e,t,r,n)=>new Promise(i=>{const o=1===r?n.size:1024*t*1024,s=o*e,a=o*(e+1),c=new FileReader;c.onload=()=>{i(new Blob([c.result],{type:"application/octet-stream"}))},c.readAsArrayBuffer(n.slice(s,a))}))(r,n,i,o).then(n=>((e,t,r,n,i,o)=>{const s=new FormData;return s.append("file",r),o.uploadPart({file:s,fileId:e,hash:t,num:n+1,total:i})})(e,t,n,r,i,s));class b extends v{constructor(e,t,r,n,i,o,s,a,c,u=5){super(),this.uploadService=e,this.filename=t,this.size=r,this.checksum=o,this.symmetricalKey=s,this.iv=a,this.saveLocationStrategy=c,this.chunkSize=u,this._id=Object(m.v4)(),this._status="initalised",this._percentComplete=0,this.file=new Blob([n],{type:i}),this.chunksTotal=Math.ceil(this.file.size/(1024*this.chunkSize*1024))}get complete(){return"complete"===this._status}start(){try{this._status="started",this.emit("start",this),this.uploadService.uploadInit({fileId:this.getId(),filename:this.filename,size:this.size,iv:h(this.iv),symKey:this.symmetricalKey,contentMD5:this.checksum,contentType:this.file.type,saveLocation:this.saveLocationStrategy}).then(()=>u(this,void 0,void 0,(function*(){for(let e=0;e<this.chunksTotal;e++)try{yield g(this.getId(),this.checksum,e,this.chunkSize,this.chunksTotal,this.file,this.uploadService),this._percentComplete=Math.round(100/this.chunksTotal*(e+1)),this.emit("progress",this._percentComplete)}catch(e){this.emit("error",e)}this.emit("finish")}))).catch(e=>{throw e})}catch(e){this._status="error",this.emit("error",e),this.emit("finish")}}getId(){return this._id}getStatus(){return this._status}getPercentageComplete(){return this._percentComplete}onStart(e){this.on("start",e)}onProgress(e){this.on("progress",e)}onFinish(e){this.on("finish",e)}onError(e){this.on("error",e)}}class w extends v{constructor(e,t){super(),this.jobs={},this.jobsArray=[],this.errors=[],e.forEach(e=>{const r=new b(t,e.file.name,e.file.size,e.encryptedFile,e.checksum,e.file.type,e.symmetricalKey,e.iv,e.saveLocationStrategy);r.onProgress(()=>this.emit("progress",this.getProgress())),r.onError(e=>{this.errors.push(e),this.emit("error",{id:r.getId(),error:e})}),r.onFinish(()=>{this.emit("progress",this.getProgress()),0===this.jobsRemaining&&this.emit("finish")});const n=this.jobsArray.push(r);this.jobs[r.getId()]=this.jobsArray[n]})}get totalJobs(){return this.jobsArray.length}get jobsCompleted(){return this.jobsArray.filter(e=>e.complete).length}get jobsRemaining(){return this.jobsArray.filter(e=>!1===e.complete).length}get percentage(){return this.jobsArray.map(e=>e.getPercentageComplete()).reduce((e,t)=>e+t)/this.totalJobs}start(e){const t=[];this.jobsArray.forEach(e=>{t.push(new Promise(t=>t(e.start())))}),Promise.all(t).then(()=>{this.emit("start",this.getJobs()),e(null)},t=>{this.emit("error",t),e(t)})}getJobs(){return this.jobsArray}getJob(e){return void 0===this.jobs[e]?null:this.jobs[e]}getProgress(){return{total:this.totalJobs,percent:this.percentage,completed:this.jobsCompleted,remaining:this.jobsRemaining,errors:this.errors}}onStart(e){this.on("start",e)}onProgress(e){this.on("progress",e)}onFinish(e){this.on("finish",e)}onError(e){this.on("error",e)}}const P=(e,t,r)=>u(void 0,void 0,void 0,(function*(){try{const n=yield fetch(`${i().http.baseURL}${e}`,t);if(!n.ok)throw n;const o=yield n.json();if(void 0===o.statusCode)throw new Error("Invalid response");return r?r(null,o.payload):o.payload}catch(e){if(r)return r(e,null);throw e}}));var S=new class{setHeaders(e){const t=new Headers;if(t.append("Authorization","Bearer "+a().idToken),void 0!==e)for(let r in e)t.append(r,e[r]);return t}setFetchRequestOptions(e,t,r={}){return{method:e||"GET",headers:this.setHeaders(t.headers),body:t.body||null,redirect:t.redirect||"follow",signal:t.signal||null,follow:r.follow||20,timeout:r.timeout||0,compress:r.compress||!0,size:r.size||0,agent:r.agent||null}}get(e,t,r){return P(e,this.setFetchRequestOptions("GET",t),r)}post(e,t,r,n){return r=Object.assign(Object.assign({},r),{body:t}),P(e,this.setFetchRequestOptions("POST",r),n)}put(e,t,r,n){return r=Object.assign(Object.assign({},r),{body:t}),P(e,this.setFetchRequestOptions("PUT",r),n)}patch(e,t,r,n){return r=Object.assign(Object.assign({},r),{body:t}),P(e,this.setFetchRequestOptions("PATCH",r),n)}delete(e,t,r){return P(e,this.setFetchRequestOptions("DELETE",t),r)}};var k=new class{getPublicKey(e){return new Promise((t,r)=>{S.get(""+i().http.keys.publicKey.replace(":id",e),{},(e,n)=>e?r(e):t(n))})}getPrivateKey(){return new Promise((e,t)=>{S.get(""+i().http.keys.privateKey,{},(r,n)=>r?t(r):e(n))})}};var A=new class{uploadInit(e){return new Promise((t,r)=>{S.post(""+i().http.storage.uploadInitialise.replace(":id",e.fileId),{folderId:e.saveLocation,filename:e.filename,size:e.size,symKey:e.symKey,iv:e.iv,contentMD5:e.contentMD5,contentType:e.contentType},{},(e,n)=>e?r(e):t(n))})}uploadPart(e){return new Promise((t,r)=>{const n={"uploader-file-id":e.fileId,"uploader-chunks-total":e.total,"uploader-chunk-number":e.num,"uploader-chunk-hash":e.hash};S.post(""+i().http.storage.uploadPart,e.file,{headers:n},(e,n)=>e?r(e):t(n))})}get(e){return new Promise((t,r)=>{S.get(""+i().http.storage.get.replace(":id",e),{},(e,n)=>e?r(e):t(n))})}list(e){return new Promise((t,r)=>{S.get(`${i().http.storage.list}?folder=${e}`,{},(e,n)=>e?r(e):t(n))})}copy(e,t){return new Promise((r,n)=>{S.put(""+i().http.storage.copy.replace(":id",e),{key:t},{},(e,t)=>e?n(e):r(t))})}move(e,t){return new Promise((r,n)=>{S.patch(""+i().http.storage.move.replace(":id",e),{key:t},{},(e,t)=>e?n(e):r(t))})}delete(e){return new Promise((t,r)=>{S.delete(""+i().http.storage.delete.replace(":id",e),{},(e,n)=>e?r(e):t(n))})}},j=r(3),K=e=>j(e),C=e=>new Promise((t,r)=>u(void 0,void 0,void 0,(function*(){try{const r=yield(n=e.pem,p(n,"private")),i=yield crypto.subtle.decrypt({name:"RSA-OAEP"},r,e.encryptionKey),o={name:"AES-GCM",iv:e.iv},s=yield crypto.subtle.decrypt(o,yield crypto.subtle.importKey("raw",i,"AES-GCM",!0,["decrypt"]),e.buffer);return t(s)}catch(e){return r(e)}var n})));class O{constructor(e){this.storageService=e}upload(e,t,r){((e,t)=>new Promise((r,n)=>u(void 0,void 0,void 0,(function*(){try{const n=[],i=yield k.getPublicKey("me");for(let r of e)n.push(new Promise((e,n)=>{var o=new FileReader;o.onerror=e=>n(e),o.onload=n=>u(void 0,void 0,void 0,(function*(){const o=n.target.result,s=K((a=o,String.fromCharCode.apply(null,new Uint16Array(a))));var a;const c=yield y(),u=crypto.getRandomValues(new Uint8Array(12)),l=yield f({buffer:o,iv:u,key:c,pem:i});return e({file:r,encryptedFile:l.buffer,checksum:s,iv:u,symmetricalKey:l.key,saveLocationStrategy:t})})),o.readAsArrayBuffer(r)}));const o=yield Promise.all(n);return r(new w(o,A))}catch(e){return n(e)}}))))(e,t).then(e=>r(null,e)).catch(e=>r(e))}download(e,t){(e=>new Promise((t,r)=>u(void 0,void 0,void 0,(function*(){try{const r=yield A.get(e),n=yield k.getPrivateKey(),i=yield C({buffer:new Uint8Array(r.buffer).buffer,encryptionKey:d(r.encryptionKey),iv:d(r.iv),pem:n});return t(i)}catch(e){return r(e)}}))))(e).then(e=>t(null,e)).catch(e=>t(e))}get(e,t){this.storageService.get(e).then(e=>t(null,e)).catch(e=>t(e))}list(e,t){this.storageService.list(e).then(e=>t(null,e)).catch(e=>t(e))}copy(e,t,r){this.storageService.copy(e,t).then(e=>r(null,e)).catch(e=>r(e))}move(e,t,r){this.storageService.move(e,t).then(e=>r(null,e)).catch(e=>r(e))}delete(e,t){this.storageService.delete(e).then(e=>t(null,e)).catch(e=>t(e))}}var E=new class{uploadInit(e){return new Promise((t,r)=>{S.post(""+i().http.transfer.uploadInitialise.replace(":id",e.saveLocation),{fileId:e.fileId,filename:e.filename,size:e.size,symKey:e.symKey,iv:e.iv,contentMD5:e.contentMD5,contentType:e.contentType},{},(e,n)=>e?r(e):t(n))})}uploadPart(e){return new Promise((t,r)=>{const n={"uploader-file-id":e.fileId,"uploader-chunks-total":e.total,"uploader-chunk-number":e.num,"uploader-chunk-hash":e.hash};S.post(""+i().http.storage.uploadPart,e.file,{headers:n},(e,n)=>e?r(e):t(n))})}getTransfer(e){return new Promise((t,r)=>{S.get(""+i().http.transfer.get.replace(":id",e),{},(e,n)=>e?r(e):t(n))})}getActivity(){return new Promise((e,t)=>{S.get(""+i().http.transfer.activity,{},(r,n)=>r?t(r):e(n))})}};class R{constructor(e){this.transferService=e}send(e,t,r){((e,t)=>new Promise((r,n)=>u(void 0,void 0,void 0,(function*(){try{const n=[],i=yield k.getPublicKey(t);for(let r of e)n.push(new Promise((e,n)=>{var o=new FileReader;o.onerror=e=>n(e),o.onload=n=>u(void 0,void 0,void 0,(function*(){const o=n.target.result,s=K(o),a=yield y(),c=crypto.getRandomValues(new Uint8Array(12)),u=yield r.arrayBuffer(),l=yield f({buffer:u,iv:c,key:a,pem:i});return e({file:r,encryptedFile:l.buffer,checksum:s,iv:c,symmetricalKey:l.key,saveLocationStrategy:t})})),o.readAsBinaryString(r)}));const o=yield Promise.all(n);return r(new w(o,E))}catch(e){return n(e)}}))))(e,t).then(e=>r(null,e)).catch(e=>r(e))}retrieve(e,t){(e=>new Promise((t,r)=>u(void 0,void 0,void 0,(function*(){try{const r=yield E.getTransfer(e),n=yield k.getPrivateKey(),i=yield C({buffer:new Uint8Array(r.buffer).buffer,encryptionKey:d(r.encryptionKey),iv:d(r.iv),pem:n});return t(i)}catch(e){return r(e)}}))))(e).then(e=>t(null,e)).catch(e=>t(e))}activity(e){this.transferService.getActivity().then(t=>e(null,t)).catch(t=>e(t))}}class I{constructor(e,t={}){c(e),o(t),this.keys=new l(k),this.storage=new O(A),this.transfer=new R(E)}}function x(e,t,r){r(null,new I(e,t))}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,